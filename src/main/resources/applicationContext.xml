<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task-3.2.xsd">
        
	<!--========================== spring的配置文件，主要是配置和业务逻辑 ==========================-->

	<context:component-scan base-package="com.yuntu">
		<!-- 除了控制器，其他都扫描 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!--========================== 数据源 ================================================== -->
	<!-- 默认将数据源的配置放在applicationContext.xml文件中 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	<!-- 配置 -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/><!-- 驱动 -->
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"/><!-- url -->
		<property name="user" value="${jdbc.user}"/><!-- 账号 -->
		<property name="password" value="${jdbc.password}"/><!-- 密码 -->
	</bean>
	<!--========================== 配置和mtbatis的整合 ======================================== -->
	
	<!-- 实例化sqlsession -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 指定数据源的作业 -->
		<property name="dataSource" ref="pooledDataSource"/>
		<!-- 指定mybatis mapper文件所在的位置（类路径下的所有映射文件） -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中（生成dao层接口的实现类） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yuntu.dpm.dao"/>
	</bean>
	
	<!-- 配置一个可以批量执行的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	
		<!-- 指定sqlSessionFactory -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
		
		<!-- executorType：指名sqlSession执行的方式
			（默认为SIMPLE而不是BATCH）
			SIMPLE:单个模式     BATCH：批量模式
			这样就可以批量添加测试数据了
		 -->
		<constructor-arg name="executorType" value="BATCH"/>
	</bean>
	<!--========================== 配置事务管理 =============================================== -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"/>
	</bean>
	
	<!-- 配置事务的增强处理 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 事务处理方法  *代表所有方法-->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 1.开启基于注解的事务
		 2.使用xml配置的形式的事务（一般情况下，比较重要的操作采用配置的事务）
	 -->
	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut expression="execution(* com.yuntu.dpm.service..*(..))" id="txPointcut"/>
		<!-- 事务处理 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>	
	

</beans>